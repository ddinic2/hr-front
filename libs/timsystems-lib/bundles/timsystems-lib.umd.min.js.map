{"version":3,"sources":["ng://timsystems-lib/lib/timsystems-lib.service.ts","ng://timsystems-lib/lib/timsystems-lib.component.ts","ng://timsystems-lib/lib/tims-grid/tims-grid.component.ts","ng://timsystems-lib/lib/tims-grid/general.pipe.ts","ng://timsystems-lib/lib/tims-grid/button.ts","ng://timsystems-lib/lib/tims-grid/button/button.component.ts","ng://timsystems-lib/lib/tims-grid/tims-grid.module.ts","ng://timsystems-lib/lib/timsystems-lib.module.ts"],"names":["TimsystemsLibService","http","_this","this","sort","order","page","requestUrl","href","get","Injectable","args","providedIn","HttpClient","TimsystemsLibComponent","prototype","ngOnInit","Component","selector","template","styles","lod","_","TimsGridComponent","source","fieldPath","elementToDelete","data","filter","elem","clickedElement","expandedElement","buttons","length","columnIds","push","sortChange","subscribe","paginator","pageIndex","merge","pipe","startWith","switchMap","isLoadingResults","dataProvider","active","direction","map","isRateLimitReached","resultsLength","total_count","console","log","items","catchError","observableOf","animations","trigger","state","style","height","minHeight","display","transition","animate","ViewChild","MatPaginator","MatSort","Input","GeneralPipe","transform","value","isArray","forEach","Pipe","name","Button","text","icon","alternateIcon","animation","ButtonComponent","targetElement","event","stopPropagation","buttonAction","buttonType","buttonDef","Map","TimsGridModule","NgModule","imports","CommonModule","AngularFontAwesomeModule","CdkTableModule","MatTableModule","MatPaginatorModule","BrowserAnimationsModule","FormsModule","ReactiveFormsModule","HttpClientModule","MatCardModule","MatProgressSpinnerModule","MatMenuModule","MatIconModule","MatToolbarModule","MatButtonModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatSortModule","declarations","exports","TimsystemsLibModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimsystemsLibService {\n  constructor(private http: HttpClient) {}\n\n  getRepoIssues = (\n    sort: string,\n    order: string,\n    page: number\n  ): Observable<GithubApi> => {\n    const href = 'https://api.github.com/search/issues';\n    const requestUrl = `${href}?q=repo:angular/material2&sort=${sort}&order=${order}&page=${page +\n      1}`;\n\n    return this.http.get<GithubApi>(requestUrl);\n  }\n}\nexport interface GithubApi {\n  items: GithubIssue[];\n  total_count: number;\n}\n\nexport interface GithubIssue {\n  created_at: string;\n  number: string;\n  state: string;\n  title: string;\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'tims-timsystems-lib',\n  template: `\n    <p>\n      timsystems-lib works!\n    </p>\n  `,\n  styles: []\n})\nexport class TimsystemsLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {\n  Component,\n  OnInit,\n  ViewChild,\n  Input,\n  PipeTransform\n} from '@angular/core';\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger\n} from '@angular/animations';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { merge, Observable, of as observableOf } from 'rxjs';\nimport { catchError, map, startWith, switchMap } from 'rxjs/operators';\nimport * as _ from 'lodash';\n\nconst lod = _;\n@Component({\n  selector: 'tims-tims-grid',\n  template: `<div class=\"example-container mat-elevation-z8\">\n  <div class=\"example-loading-shade\" *ngIf=\"isLoadingResults || isRateLimitReached\">\n    <mat-spinner *ngIf=\"isLoadingResults\"></mat-spinner>\n    <div class=\"example-rate-limit-reached\" *ngIf=\"isRateLimitReached\">\n      DoÅ¡lo je do greÅ¡ke, molimo proverite vaÅ¡u internet konekciju\n    </div>\n  </div>\n\n  <div class=\"example-table-container\">\n\n    <table mat-table [dataSource]=\"data\" class=\"example-table\" matSort multiTemplateDataRows matSortActive=\"state\"\n      matSortDisableClear matSortDirection=\"asc\">\n\n\n      <ng-container matColumnDef=\"{{column}}\" *ngFor=\"let column of columnIds; let id=index\">\n        <ng-container *ngIf=\"sortable;else nosort\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear> {{columnNames[id]}} </th>\n        </ng-container>\n        <ng-template #nosort>\n          <th mat-header-cell *matHeaderCellDef> {{columnNames[id]}} </th>\n        </ng-template>\n        <ng-container *ngIf=\"column!=='buttons';else test\">\n          <td mat-cell *matCellDef=\"let row\"> <span>{{getField(row,column)|general:columnPipes[id]}}</span></td>\n        </ng-container>\n        <ng-template #test>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"buttons-panel\" [ngStyle]=\"{'width': (buttons.length*20)+'px'}\">\n              <ng-container *ngFor=\"let button of buttons;let i=index\">\n                <tims-button [buttonAction]=\"button!=='delete'? buttonActions[i]: removeElement\" [targetElement]=\"row\"\n                  [buttonType]=\"button\"></tims-button>\n              </ng-container>\n            </div>\n          </td>\n        </ng-template>\n      </ng-container>\n\n      <ng-container matColumnDef=\"expandedDetail\">\n        <td mat-cell *matCellDef=\"let row\" [attr.colspan]=\"columnIds.length\">\n          <div class=\"example-element-detail\" [@detailExpand]=\"row == expandedElement ? 'expanded' : 'collapsed'\">\n            <!-- <div class=\"example-element-diagram\"> -->\n            <!-- <div class=\"example-element-position\"> {{row.body}} </div> -->\n            <!-- <div class=\"example-element-symbol\"> nesto </div>\n              <!-- <div class=\"example-element-name\"> nesto </div> -->\n            <!-- <div class=\"example-element-weight\"> {{row.body}} </div> -->\n            <!-- </div> -->\n            <div class=\"example-element-description\">\n              {{row.body}}\n              <span class=\"example-element-description-attribution\"> -- Izvor neki </span>\n            </div>\n          </div>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"columnIds\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: columnIds;\" class=\"example-element-row\" [class.example-expanded-row]=\"expandedElement === row\"\n        (click)=\"toggleExpand(row)\">\n      </tr>\n      <ng-container *ngIf=\"displayDetails\">\n        <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"example-detail-row\"></tr>\n      </ng-container>\n    </table>\n  </div>\n\n  <mat-paginator [length]=\"resultsLength\" [pageSize]=\"30\"></mat-paginator>\n</div>\n`,\n  styles: [`table{width:100%}tr.example-detail-row{height:0}.buttons-panel{display:inline-flex;flex-direction:row}tr.example-element-row:not(.example-expanded-row):hover{background:#f5f5f5}tr.example-element-row:not(.example-expanded-row):active{background:#efefef}.example-element-row td{border-bottom-width:0}.example-element-detail{overflow:hidden;display:flex}.example-element-diagram{min-width:80px;border:2px solid #000;padding:8px;font-weight:lighter;margin:8px 0;height:104px}.example-element-symbol{font-weight:700;font-size:40px;line-height:normal}.example-element-description{padding:16px}.example-element-description-attribution{opacity:.5}.example-container{position:relative;width:100%}.example-loading-shade{position:absolute;top:0;left:0;bottom:56px;right:0;background:rgba(0,0,0,.15);z-index:1;display:flex;align-items:center;justify-content:center}.example-rate-limit-reached{color:#980000;max-width:360px;text-align:center}`],\n  animations: [\n    trigger('detailExpand', [\n      state(\n        'collapsed',\n        style({ height: '0px', minHeight: '0', display: 'none' })\n      ),\n      state('expanded', style({ height: '*' })),\n      transition(\n        'expanded <=> collapsed',\n        animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')\n      )\n    ])\n  ]\n})\nexport class TimsGridComponent implements OnInit {\n  @ViewChild(MatPaginator)\n  paginator: MatPaginator;\n\n  @ViewChild(MatSort)\n  sort: MatSort;\n\n  @Input()\n  sortable: boolean;\n\n  @Input()\n  dataProvider: Function;\n\n  @Input()\n  columnIds: string[];\n\n  @Input()\n  columnNames: string[];\n\n  @Input()\n  columnPipes: PipeTransform[];\n\n  @Input()\n  buttons: string[];\n\n  @Input()\n  buttonActions: Function[];\n\n  @Input()\n  displayDetails = false;\n\n  resultsLength = 0;\n  isLoadingResults = true;\n  isRateLimitReached = false;\n  expandedElement: any;\n  data: any[];\n  constructor() {}\n\n  getField = (source, fieldPath: string) => lod.get(source, fieldPath, '');\n\n  ngOnInit() {\n    if (this.buttons && this.buttons.length > 0) {\n      this.columnIds.push('buttons');\n    }\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\n\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this.isLoadingResults = true;\n          return <Observable<any>>(\n            this.dataProvider(\n              this.sort.active,\n              this.sort.direction,\n              this.paginator.pageIndex\n            )\n          );\n        }),\n        map(data => {\n          // Flip flag to show that loading has finished.\n          this.isLoadingResults = false;\n          this.isRateLimitReached = false;\n          this.resultsLength = data.total_count;\n          console.log(data);\n          return data.items;\n        }),\n        catchError(() => {\n          this.isLoadingResults = false;\n          // Catch if the GitHub API has reached its rate limit. Return empty data.\n          this.isRateLimitReached = true;\n          return observableOf([]);\n        })\n      )\n      .subscribe(data => (this.data = data));\n  }\n\n  removeElement = elementToDelete => {\n    this.data = this.data.filter(elem => elem !== elementToDelete);\n  };\n\n  toggleExpand = clickedElement =>\n    (this.expandedElement =\n      !this.expandedElement || this.expandedElement !== clickedElement\n        ? clickedElement\n        : null);\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { isArray } from 'util';\n\n@Pipe({\n  name: 'general'\n})\nexport class GeneralPipe implements PipeTransform {\n  transform(value: any, args?: any): any {\n    if (!args) {\n      return value;\n    }\n    if (isArray(args)) {\n      args.forEach(pipe => {\n        value = (<PipeTransform>pipe).transform(value);\n      });\n    } else {\n      value = (<PipeTransform>args).transform(value);\n    }\n    return value;\n  }\n}\n","export default class Button {\r\n  text: string;\r\n  icon: string;\r\n  animation?: string;\r\n  alternateIcon?: string;\r\n  constructor(\r\n    text: string,\r\n    icon: string,\r\n    alternateIcon?: string,\r\n    animation?: string\r\n  ) {\r\n    this.text = text;\r\n    this.icon = icon;\r\n    this.alternateIcon = alternateIcon ? alternateIcon : null;\r\n    this.animation = animation;\r\n  }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\nimport Button from '../button';\n\n@Component({\n  selector: 'tims-button',\n  template: `<div matTooltip=\"Info about the action\" class=\"button-container\" (click)=\"concreteButtonAction(targetElement,$event)\">\n  <fa [name]=\"buttonDef.icon\" [animation]=\"buttonDef.animation\"></fa>\n</div>\n`,\n  styles: [`.button-container{cursor:pointer;color:#5454c7;margin:4px;line-height:100%;flex:1}.button-container:hover{color:orange}`]\n})\nexport class ButtonComponent implements OnInit {\n  @Input()\n  buttonType: string;\n\n  @Input()\n  targetElement;\n\n  @Input()\n  buttonAction: Function;\n\n  buttonDef: Button;\n  constructor() {}\n\n  ngOnInit() {\n    if (this.buttonType) {\n      this.buttonDef = buttons.get(this.buttonType);\n    }\n  }\n\n  concreteButtonAction = (targetElement, event: MouseEvent) => {\n    event.stopPropagation();\n    this.buttonAction(targetElement);\n  }\n}\n\nconst buttons: Map<string, Button> = new Map([\n  ['edit', new Button('Izmeni', 'pencil-square-o')],\n  ['delete', new Button('ObriÅ¡i', 'trash-o')],\n  ['view', new Button('Detalji', 'address-card-o')],\n  ['save', new Button('SaÄuvaj', 'floppy-o')]\n]);\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TimsGridComponent } from './tims-grid.component';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport {\n  MatButtonModule,\n  MatCardModule,\n  MatIconModule,\n  MatInputModule,\n  MatMenuModule,\n  MatProgressSpinnerModule,\n  MatSelectModule,\n  MatSortModule,\n  MatTableModule,\n  MatToolbarModule,\n  MatFormFieldModule,\n  MatPaginatorModule\n} from '@angular/material';\nimport { GeneralPipe } from './general.pipe';\nimport { ButtonComponent } from './button/button.component';\nimport { AngularFontAwesomeModule } from 'angular-font-awesome';\n@NgModule({\n  imports: [\n    CommonModule,\n    AngularFontAwesomeModule,\n    CdkTableModule,\n    MatTableModule,\n    MatPaginatorModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    MatCardModule,\n    MatProgressSpinnerModule,\n    MatMenuModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatSortModule,\n    MatTableModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  declarations: [TimsGridComponent, GeneralPipe, ButtonComponent],\n  exports: [TimsGridComponent]\n})\nexport class TimsGridModule {}\n","import { NgModule } from '@angular/core';\nimport { TimsystemsLibComponent } from './timsystems-lib.component';\nimport { TimsGridModule } from './tims-grid/tims-grid.module';\n\n@NgModule({\n  imports: [TimsGridModule],\n  declarations: [TimsystemsLibComponent],\n  exports: [TimsGridModule, TimsystemsLibComponent]\n})\nexport class TimsystemsLibModule {}\n"]}